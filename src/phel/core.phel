(ns phel\core
  (:use Phel\Lang\Phel)
  (:use Phel\Lang\Tuple)
  (:use Phel\Lang\Struct)
  (:use Phel\Lang\Keyword)
  (:use Phel\Lang\IContactable)
  (:use Phel\Lang\PhelArray)
  (:use Phel\Lang\Table)
  (:use Phel\Lang\Nil)
  (:use Phel\Lang\ICons)
  (:use Phel\Lang\ISlice)
  (:use Phel\Lang\IIdentical)
  (:use Phel\Lang\ICdr)
  (:use Phel\Lang\IPop)
  (:use Phel\Lang\IPush)
  (:use Phel\Lang\IRest)
  (:use Phel\Lang\IRemove)
  (:use Phel\Lang\IConcat)
  (:use Phel\Lang\IMeta)
  (:use Phel\Lang\Symbol)
  (:use Phel\Munge)
  (:use Phel\Printer)
  (:use Countable)
  (:use Exception)
  (:use InvalidArgumentException))

(def *ns* "\\phel\\core")

# --------------------------------------------
# Basic methods for quasiquote and destructure
# --------------------------------------------

(def tuple
  "```phel\n(tuple & xs)\n```\nCreates a new Tuple. If no argument is provided, an empty Tuple is created."
  (fn [& xs] (php/new Tuple (php/-> xs (toPhpArray)))))

(def next
  "```phel\n(next xs)\n```\nReturns the sequence of elements after the first element. If there are no
elements, returns nil."
  (fn [xs]
    (if (php/== xs nil)
      nil
      (if (php/instanceof xs ICdr)
        (php/-> xs (cdr))
        (if (php/is_array xs)
          (let [sliced (php/array_slice xs 1)]
            (if (php/empty sliced)
              nil
              sliced))
          (throw (php/new InvalidArgumentException
                    (php/. "can not call 'next on " (php/gettype xs)))))))))

(def concat1
  @{:private true
    :doc "Concatinates two sequential data structures."}
  (fn [xs ys]
    (if (php/instanceof xs IConcat)
      (php/-> xs (concat ys))
      (do
        (foreach [y ys]
          (php/apush xs y))
        xs))))

(def concat
  "```phel\n(concat arr & xs)\n```\nConcatinates multiple sequential data structures."
  (fn [arr & xs]
    (loop [res arr
           [y & ys] xs]
      (if (php/== nil y)
        res
        (recur (concat1 res y) ys)))))

# quasiquote can be used down here

# ------------
# Basic macros
# ------------

(def defn-builder
  @{:macro true
    :private true}
  (fn [name meta & fdecl]
    (let [meta (if (php/is_string (php/aget fdecl 0))
                 (do
                  (php/aset meta :doc (php/aget fdecl 0))
                  meta)
                 meta)
          fdecl (if (php/is_string (php/aget fdecl 0))
                 (next fdecl)
                 fdecl)
          meta (if (php/instanceof (php/aget fdecl 0) Table)
                 (do
                   (foreach [k v (php/aget fdecl 0)]
                     (php/aset meta k v))
                   meta)
                 meta)
          fdecl (if (php/instanceof (php/aget fdecl 0) Table)
                  (next fdecl)
                  fdecl)
          args (php/aget fdecl 0)
          docstring (php/aget meta :doc)
          docstring (php/. "```phel\n(" name " " (php/implode " " (apply php/array args)) ")\n```\n" docstring)
          _ (php/aset meta :doc docstring)]
      `(def ,name ,meta (fn ,@fdecl)))))

(def defn
  @{:macro true
    :doc "```phel\n(defn name & fdecl)\n```\nDefine a new global function"}
  (fn [name & fdecl] (apply defn-builder name @{} fdecl)))

(defn def-
  "Define a private value that will not be exported"
  [name value]
  `(def ,name :private ,value))

(def defmacro
  @{:macro true
    :doc "```phel\n(defmacro name & fdecl)\n```\nDefine a macro"}
  (fn [name & fdecl] (apply defn-builder name @{:macro true} fdecl)))

(defmacro defn-
  "Define a private function that will not be exported"
  [name & fdecl]
  (apply defn-builder name @{:private true} fdecl))

(defmacro defmacro-
  "Define a private macro that will not be exported"
  [name & fdecl]
  (apply defn-builder name @{:macro true :private true} fdecl))

(defmacro declare
  "Declare a global symbol before it is defined."
  [name]
  `(def ,name nil))

(defmacro defstruct
  "Define a new struct"
  [name keys]
  (let [name-str (php/-> name (getName))
        class-name-str (php/. *ns* "\\" (php/:: Munge (encode name-str)))
        is-name (php/new Symbol (php/. name-str "?"))]
    `(do
      (defstruct* ,name ,keys)
      (defn ,name ,keys (php/new ,class-name-str ,@keys))
      (defn ,is-name [x] (php/is_a x ,class-name-str)))))

(defmacro comment
  "Ignores the body of the comment"
  [&])

(defn gensym
  "Generates a new unique symbol."
  []
  (php/:: Symbol (gen)))

(defn str
  "Creates a string by concatenating values together. If no arguments are
provided an empty string is returned. Nil and false are represented as empty
string. True is represented as 1. Otherwise it tries to call `__toString`.
This is PHP equalivalent to `$args[0] . $args[1] . $args[2] ...`"
  [& args]
  (if args
    (apply php/. args)
    ""))

# ------------------
# Basic constructors
# ------------------

(defn tuple-brackets
  "Creates a new Bracket-Tuple. If no argument is provided,
an empty Braket-Tuple is created."
  [& xs]
  (php/new Tuple (php/-> xs (toPhpArray)) true))

(defn array
  "Creates a new Array. If no argument is provided, an empty Array is created."
  [& xs]
  xs)

(defn table
  "Creates a new Table. If no argument is provided, an empty Table is created.
The number of parameters must be even."
  [& xs]
  (php/:: Table (fromKVArray (php/-> xs (toPhpArray)))))

(defn keyword
  "Creates a new Keyword from a given string."
  [x]
  (php/new Keyword x))

# -------------------------
# Basic sequence operations
# -------------------------

(defn cons
  "Prepends `x` to the beginning of `xs`"
  [x xs]
  (if (php/is_array xs)
    (do
      (php/array_unshift xs x)
      xs)
    (if (php/instanceof xs ICons)
      (php/-> xs (cons x))
      (if (php/== xs nil)
        @[x]
        (throw (php/new InvalidArgumentException
                  (php/. "can not do cons " (php/print_r x true))))))))

(defn first
  "Returns the first element of an indexed sequence or nil."
  [xs]
  (php/aget xs 0))

(defn ffirst
  "Same as `(first (first xs))`"
  [xs]
  (first (first xs)))

(defn second
  "Returns the second element of an indexed sequence or nil."
  [xs]
  (php/aget xs 1))

(defn rest
  "Returns the sequence of elements after the first element. If there are no
elements, returns an empty sequence."
  [xs]
  (if (php/instanceof xs IRest)
    (php/-> xs (rest))
    (if (php/is_array xs)
      (php/array_slice xs 1)
      (throw (php/new InvalidArgumentException "can not do rest")))))

(defn nfirst
  "Same as `(next (first xs))`"
  [xs]
  (next (first xs)))

(defn nnext
  "Same as `(next (next xs))`"
  [xs]
  (next (next xs)))

(defn count
  "Counts the number of elements in a sequence. Can be used on everything that
implement the PHP Countable interface."
  [xs]
  (if (php/instanceof xs Countable)
    (php/-> xs (count))
    (if (php/is_array xs)
      (php/count xs)
      (if (php/== xs nil)
        0
        (throw (php/new InvalidArgumentException "object is not countable"))))))

# ------------------------
# Control structure macros
# ------------------------

(defmacro if-not
  "Shorthand for `(if (not condition) else then)`."
  [test then & [else]]
  `(if ,test ,else ,then))

(defmacro when
  "Evaluates `test` and if that is logical true, evaluates `body`"
  [test & body]
  `(if ,test (do ,@body)))

(defmacro when-not
  "Evaluates `test` and if that is logical true, evaluates `body`"
  [test & body]
  `(if ,test nil (do ,@body)))

(defmacro cond
  "Takes a set of test/expression pairs. Evaluates each test one at a time.
  If a test returns logically true, the expression is evaluated and return.
  If no test matches a final last expression can be provided that is than
  evaluated and return. Otherwise nil is returned."
  [& pairs]
  (let [cnt (count pairs)]
    (if (php/== cnt 0)
      nil
      (if (php/== cnt 1)
        (first pairs)
        (tuple 'if
               (first pairs)
               (second pairs)
               (cons 'cond (apply tuple (next (next pairs)))))))))

(defmacro case
  "Takes an expression `e` and a set of test-content/expression pairs. First
  evaluates `e` and the then finds the first pair where the test-constant matches
  the result of `e`. The associated expression is then evaluated and returned.
  If no matches can be found a final last expression can be provided that is
  than evaluated and return. Otherwise nil is returned."
  [e & pairs]
  (if (next pairs)
    (let [v (gensym)]
      `(let [,v ,e]
        (if (php/== ,v ',(first pairs))
          ,(first (next pairs))
          (case ,v ,@(next (next pairs))))))
    (first pairs)))

# ----------------
# Boolean operation
# ----------------

(defmacro or
  "Evaluates each expression one at a time, from left to right. If a form
returns a logical true value, or returns that value and doesn't evaluate any of
the other expressions, otherwise it returns the value of the last expression.
Calling or without arguments, returns nil."
  [& args]
  (case (count args)
    0 nil
    1 (first args)
      (let [v (gensym)]
        `(let [,v ,(first args)]
          (if ,v ,v (or ,@(next args)))))))

(defmacro and
  "Evaluates each expression one at a time, from left to right. If a form
returns logical false, and returns that value and doesn't evaluate any of the
other expressions, otherwise it returns the value of the last expression.
Calling the and function without arguments returns true."
  [& args]
  (case (count args)
    0 'true
    1 (first args)
      (let [v (gensym)]
        `(let [,v ,(first args)]
          (if ,v (and ,@(next args)) ,v)))))

(defn- id2 [a b]
  (if (php/instanceof a IIdentical)
    (php/-> a (identical b))
    (php/=== a b)))

(defn id
  "Checks if all values are identically. Same as `a === b` in PHP."
  [a & more]
  (case (count more)
    0 true
    1 (id2 a (first more))
      (if (id2 a (first more))
        (recur (first more) (next more))
        false)))

(defn =
  "Checks if all values are equal. Same as `a == b` in PHP."
  [a & more]
  (case (count more)
    0 true
    1 (php/== a (first more))
      (if (php/== a (first more))
        (recur (first more) (next more))
        false)))

(defn not
  "The `not` function returns `true` if the given value is logical false and
`false` otherwise."
  [x]
  (if x false true))

(defn not=
  "Checks if all values are unequal. Same as `a != b` in PHP."
  [a & more]
  (case (count more)
    0 false
    1 (not (= a (first more)))
      (not (apply = a more))))

(defn <
  "Check if all given values are in ascending order. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/< a (first more))
      (if (php/< a (first more))
        (recur (first more) (next more))
        false)))

(defn <=
  "Check if all given values are in a non-descending order. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/<= a (first more))
      (if (php/<= a (first more))
        (recur (first more) (next more))
        false)))

(defn >
  "Check if all given values are in descending order. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/> a (first more))
      (if (php/> a (first more))
        (recur (first more) (next more))
        false)))

(defn >=
  "Check if all given values are in non-ascending order. Returns a boolean."
  [a & more]
  (case (count more)
    0 true
    1 (php/>= a (first more))
      (if (php/>= a (first more))
        (recur (first more) (next more))
        false)))

(defn all?
  "Returns true if `(pred x)` is logical true for every `x` in `xs`, else false."
  [pred xs]
  (cond
    (php/== (count xs) 0) true
    (pred (first xs))     (recur pred (next xs))
                          false))
(defn some?
  "Returns true if `(pred x)` is logical true for at least one `x` in `xs`, else false."
  [pred xs]
  (if xs
    (or (pred (first xs)) (recur pred (next xs)))))

(defn true?
  "Checks if `x` is true. Same as `x === true` in PHP."
  [x]
  (id x true))

(defn truthy?
  "Checks if `x` is truthy. Same as `x == true` in PHP."
  [x]
  (= x true))

(defn false?
  "Checks if `x` is false. Same as `x === false` in PHP."
  [x]
  (id x false))

(defn compare
  "An integer less than, equal to, or greater than zero when `x` is less than,
  equal to, or greater than `y`, respectively."
  [x y]
  (php/<=> x y))

# --------------
# Type operation
# --------------

(defn type
  "Returns the type of `x`. Following types can be returned:

* `:tuple`
* `:array`
* `:struct`
* `:table`
* `:keyword`
* `:symbol`
* `:int`
* `:float`
* `:string`
* `:nil`
* `:boolean`
* `:function`
* `:php/array`
* `:php/resource`
* `:php/object`
* `:unknown`"
  [x]
  (cond
    (php/instanceof x Tuple)      :tuple
    (php/instanceof x PhelArray)  :array
    (php/instanceof x Struct)     :struct
    (php/instanceof x Table)      :table
    (php/instanceof x Keyword)    :keyword
    (php/instanceof x Symbol)     :symbol
    (php/is_int x)                :int
    (php/is_float x)              :float
    (php/is_string x)             :string
    (php/is_null x)               :nil
    (php/is_bool x)               :boolean
    (php/is_callable x)           :function
    (php/is_array x)              :php/array
    (php/is_resource x)           :php/resource
    (php/is_object x)             :php/object
                                  :unknown))

(defn nil?
  "Returns true if `x` is nil, false otherwise."
  [x]
  (id x nil))

(defn float?
  "Returns true if `x` is float point number, false otherwise."
  [x]
  (= (type x) :float))

(defn int?
  "Returns true if `x` is a integer number, false otherwise."
  [x]
  (= (type x) :int))

(defn number?
  "Returns true if `x` is a number, false otherwise."
  [x]
  (or (= (type x) :int) (= (type x) :float)))

(defn string?
  "Returns true if `x` is a string, false otherwise."
  [x]
  (= (type x) :string))

(defn keyword?
  "Returns true if `x` is a string, false otherwise."
  [x]
  (= (type x) :keyword))

(defn symbol?
  "Returns true if `x` is a symbol, false otherwise."
  [x]
  (= (type x) :symbol))

(defn function?
  "Returns true if `x` is a function, false otherwise."
  [x]
  (= (type x) :function))

(defn struct?
  "Returns true if `x` is a struct, false otherwise."
  [x]
  (= (type x) :struct))

(defn table?
  "Returns true if `x` is a table, false otherwise."
  [x]
  (= (type x) :table))

(defn array?
  "Returns true if `x` is a array, false otherwise."
  [x]
  (= (type x) :array))

(defn tuple?
  "Returns true if `x` is a tuple, false otherwise."
  [x]
  (= (type x) :tuple))

(defn boolean?
  "Returns true if `x` is a boolean, false otherwise."
  [x]
  (= (type x) :boolean))

(defn php-array?
  "Returns true if `x` is a PHP Array, false otherwise."
  [x]
  (= (type x) :php/array))

(defn php-resource?
  "Returns true if `x` is a PHP resource, false otherwise."
  [x]
  (= (type x) :php/resource))

(defn php-object?
  "Returns true if `x` is a PHP object, false otherwise."
  [x]
  (= (type x) :php/object))

(defn empty?
  "Returns true if `(count x)` is zero, false otherwise."
  [x]
  (= 0 (count x)))

(defn indexed?
  "Returns true if `x` is indexed sequence, false otherwise."
  [x]
  (let [t (type x)]
    (or (= t :array) (= t :tuple) (= t :php/array))))

# ------------------
# Sequence operation
# ------------------

(defn peek
  "Returns the last element of a sequence."
  [xs]
  (php/aget xs (php/- (count xs) 1)))

(defn push
  "Inserts `x` at the end of the sequence `xs`."
  [^:reference xs x]
  (cond
    (php-array? xs) (do (php/apush xs x) xs)
    (php/instanceof xs IPush) (php/-> xs (push x))
    (throw (php/new InvalidArgumentException
              (str "Can not push on type " (type xs))))))

(defn pop
  "Removes the the last element of the array `xs`. If the array is empty
  returns nil."
  [^:reference xs]
  (cond
    (php-array? xs) (php/array_pop xs)
    (php/instanceof xs IPop) (php/-> xs (pop))
    (throw (php/new InvalidArgumentException "Can not pop"))))

(defn remove
  "Removes up to `n` element from array `xs` starting at index `offset`."
  [^:reference xs offset & [n]]
  (cond
    (php-array? xs) (if n (php/array_splice xs offset n) (php/array_splice xs offset))
    (php/instanceof xs IRemove) (php/-> xs (remove offset n))
    (throw (php/new InvalidArgumentException "Can not remove"))))

(defn get
  "Get the value mapped to `key` from the datastructure `ds`.
  Returns `opt` or nil if the value can not be found."
  [ds k & [opt]]
  (let [res (php/aget ds k)]
    (if (nil? res)
      opt
      res)))

(defn put
  "Puts `value` mapped to `key` on the datastructure `ds`. Returns `ds`."
  [ds key value]
  (do
    (when (php-array? ds)
      (throw (php/new InvalidArgumentException "Can not call put on pure PHP
arrays. Use (php/aset ds key value)" )))
    (php/aset ds key value)
    ds))

(defn unset
  "Returns `ds` without `key`."
  [ds key]
  (let [x ds]
    (when (php-array? ds)
      (throw (php/new InvalidArgumentException "Can not call unset on pure PHP
arrays. Use (php/aunset ds key)" )))
    (php/aunset x key)
    x))

(defn map [f & xs]
  (case (count xs)
    0 (throw (php/new InvalidArgumentException "expected at least one indexed
collection in map"))
    1 (let [res @[]]
        (foreach [x (first xs)]
          (push res (f x)))
        res)
      (loop [res @[]
             seq xs]
        (if (some? nil? seq)
           res
           (do
             (push res (apply f (map first seq)))
             (recur res (map next seq)))))))

(defn map-indexed
  "Applies f to each element in xs. f is a two argument function. The first
  argument is index of the element in the sequence and the second element is the
  element itself."
  [f xs]
  (let [res @[]]
    (foreach [k v xs]
      (push res (f k v)))
    res))

(defn mapcat
  "Applies f on all xs and concatenate the result."
  [f & xs]
  (apply concat @[] (apply map f xs)))

(defn reduce [f init xs]
  (if (nil? (first xs))
    init
    (recur f (f init (first xs)) (next xs))))

(defn reduce2 [f [x & xs]]
  (reduce f x xs))

(defn slice
  "Extract a slice of `xs`."
  [xs & [offset & [length]]]
  (cond
    (php-array? xs) (php/array_slice xs offset length)
    (php/instanceof xs ISlice) (php/-> xs (slice offset length))
    (throw (php/new InvalidArgumentException "Can not slice"))))

(defn get-in
  [ds ks & [opt]]
  (let [res (reduce get ds ks)]
    (if (nil? res) opt res)))

(defn put-in
  [ds [k & ks] v]
  (if-not (nil? ks)
    (put ds k (put-in (get ds k @{}) ks v))
    (put ds k v)))

(defn update
  [ds k f & args]
  (put ds k (apply f (get ds k) args)))

(defn update-in
  [ds [k & ks] f & args]
  (if ks
    (put ds k (apply update-in (get ds k @{}) ks f args))
    (let [current (get ds k)] # Extract value first for possible call-by-reference
      (put ds k (apply f current args)))))

(defn drop [n xs]
  (slice xs (if (php/< n 0) 0 n)))

(defn drop-while [pred xs]
  (loop [s xs]
    (if (and s (pred (first s)))
      (recur (rest s))
      s)))

(defn take [n xs]
  (slice xs 0 (if (php/< n 0) 0 n)))

(defn take-while [pred xs]
  (let [res @[]]
    (loop [[y & ys] xs]
      (if (and y (pred y))
        (do
          (push res y)
          (recur ys))
        res))))

(defn filter [pred xs]
  (let [res @[]]
    (foreach [x xs]
      (when (pred x)
        (push res x)))
    res))

(defn keep [pred xs]
  (let [res @[]]
    (foreach [x xs]
      (let [predRes (pred x)]
        (when-not (nil? predRes)
          (push res predRes))))
    res))

(defn keep-indexed [pred xs]
  (let [res @[]]
    (foreach [k v xs]
      (let [predRes (pred k v)]
        (when-not (nil? predRes)
          (push res predRes))))
    res))

(defn find [pred xs]
  (loop [s xs]
    (if s
      (if (pred (first s))
        (first s)
        (recur (next s)))
      nil)))

(defn find-index [pred xs]
  (loop [s xs
         i 0]
    (if s
      (if (pred (first s))
        i
        (recur (next s) (php/+ i 1)))
      nil)))

(defn distinct
  "Returns an array with duplicated values removed in `xs`."
 [xs]
 (let [seen @{}
       ret @[]]
  (foreach [x xs]
    (when-not (get seen x)
      (put seen x true)
      (push ret x)))
  ret))

(defn reverse
  "Reverses the order of the elements in the given sequence"
  [xs]
  (let [ret @[]]
    (loop [i (php/- (count xs) 1)]
      (if (>= i 0)
        (do
          (push ret (get xs i))
          (recur (php/- i 1)))
        ret))))

(defn interleave
  "Returns a array with the first items of each col, than the second items etc."
  [& xs]
  (loop [i 0
         res @[]]
    (let [nths (map |(get $ i) xs)]
      (if (some? nil? nths)
        res
        (recur (php/+ i 1) (concat res nths))))))

(defn interpose
  [sep xs]
  (let [res @[]]
    (foreach [k v xs]
      (when (> k 0)
        (push res sep))
      (push res v))
    res))

(defn frequencies
  [xs]
  (let [res @{}]
    (foreach [x xs]
      (let [n (get res x)]
        (put res x (php/+ 1 (or n 0)))))
    res))

(defn keys
  "Gets the keys of an associative data structure"
  [xs]
  (let [res @[]]
    (foreach [k v xs]
      (push res k))
    res))

(defn values
  "Gets the values of an associative data structure"
  [xs]
  (let [res @[]]
    (foreach [k v xs]
      (push res v))
    res))

(defn pairs
  "Gets the pairs of an associative data structure"
  [xs]
  (let [res @[]]
    (foreach [k v xs]
      (push res [k v]))
    res))

(defn kvs
  "Returns an array of key value pairs like @[k1 v1 k2 v2 k3 v3 ...]."
  [xs]
  (let [res @[]]
    (foreach [k v xs]
      (push res k)
      (push res v))
    res))

(defn to-php-array
  "Create a PHP Array from a sequential data structure"
  [xs]
  (apply php/array xs))

(defn sort
  "Returns a sorted array. If no comperator is supplied compare is used."
  [xs & [comp]]
  (let [php-array (to-php-array xs)]
    (php/usort php-array (or comp compare))
    (apply array php-array)))

(defn sort-by
  "Returns a sorted array where the sort order is determined by comparing
  (keyfn item). If no comperator is supplied compare is used."
  [keyfn xs & [comp]]
  (let [php-array (to-php-array xs)
        cmp (or comp compare)]
    (php/usort php-array |(cmp (keyfn $1) (keyfn $2)))
    (apply array php-array)))

(defn shuffle
  "Returns a random permutation of xs."
  [xs]
  (let [php-array (to-php-array xs)]
    (php/shuffle php-array)
    (apply array php-array)))

(defn range
  "Create an array of values [start, end). If the function has one argument the
  the range [0, end) is returned. With two arguments, returns [start, end).
  The third argument is an optional step width (default 1)."
  [a & rest]
  (case (count rest)
    0 (range 0 a 1)
    1 (range a (get rest 0) 1)
    2 (let [res @[]
            begin a
            end (get rest 0)
            step (get rest 1)]
        (loop [i begin]
          (if (< i end)
            (do
              (push res i)
              (recur (php/+ i step)))
          res)))
      (throw (php/new InvalidArgumentException "Range function expects one, two or three arguments"))))

(defn repeat
  "Returns an array of length n where every element is x."
  [n x]
  (let [res @[]]
    (loop [i n]
      (if (> i 0)
        (do
          (push res x)
          (recur (php/- i 1)))
        res))))

(defn group-by
  "Returns a table of the elements of xs keyed by the result of
  f on each element."
  [f xs]
  (let [res @{}]
    (foreach [x xs]
      (let [k (f x)]
        (when-not (get res k)
          (put res k @[]))
        (update-in res [k] push x)))
    res))

(defn zipcoll
  "Creates a table from two sequencial data structures. Return a new table."
  [a b]
  (apply table (interleave a b)))

(defn merge-into
  "Merges multiple tables into first table. If a key appears in more than one
  collection, then later values replace any previous ones."
  [tab & tables]
  (do
    (foreach [table tables]
      (foreach [k v table]
        (put tab k v)))
    tab))

(defn merge
  "Merges multiple tables into one new table. If a key appears in more than one
  collection, then later values replace any previous ones."
  [& tables]
  (apply merge-into @{} tables))

(defn invert
  "Returns a new table where the keys and values are swapped. If table has
  duplicated values, some keys will be ignored."
  [table]
  (zipcoll (values table) (keys table)))

(defn split-at
  "Returns a tuple of [(take n coll) (drop n coll)]"
  [n xs]
  [(take n xs) (drop n xs)])

(defn split-with
  "Returns a tuple of [(take-while pred coll) (drop-while pred coll)]"
  [f xs]
  [(take-while f xs) (drop-while f xs)])

# ------------------
# Function operation
# ------------------

(defn identity [x] x)

(defn comp [& fs]
  (case (count fs)
    0 identity
    1 (first fs)
    2 |((first fs) (apply (second fs) $&))
      (reduce2 comp fs)))

(defn complement [f]
  |(not (apply f $&)))

(defn juxt [& fs]
  (fn [& args]
    (reduce
      |(push $1 (apply $2 args))
      @[]
      fs)))

(defn partial [f & args]
  |(apply f (concat @[] args $&)))


# -----------------------
# More Sequence operation
# -----------------------

(defn tree-seq
  "Returns an array of the nodes in the tree, via a depth first walk.
  branch? is a function with one argument that returns true if the given node
  has children.
  children must be a function with one argument that returns the children of the node.
  root the the root node of the tree."
  [branch? children root]
  (let [ret @[]]
    (loop [stack @[root]]
      (if (> (count stack) 0)
        (let [node (pop stack)]
          (push ret node)
          (if (branch? node)
            (recur (concat stack (reverse (children node))))
            (recur stack)))
        ret))))

(defn flatten
  "Takes a nested sequential data structure (tree), and returns their contents
  as a single, flat array."
  [xs]
  (filter
    (complement indexed?)
    (rest (tree-seq indexed? identity xs))))

# -----------------
# Bitwise operation
# -----------------

(defn bit-and [x y & args]
  (let [all (concat [x y] args)]
    (reduce2 |(php/& $1 $2) all)))

(defn bit-or [x y & args]
  (let [all (concat [x y] args)]
    (reduce2 |(php/| $1 $2) all)))

(defn bit-xor [x y & args]
  (let [all (concat [x y] args)]
    (reduce2 |(php/^ $1 $2) all)))

(defn bit-not [x]
  (php/~ x))

(defn bit-shift-left [x n]
  (php/<< x n))

(defn bit-shift-right [x n]
  (php/>> x n))

(defn bit-set [x n]
  (bit-or x (bit-shift-left 1 n)))

(defn bit-clear [x n]
  (bit-and x (bit-not (bit-shift-left 1 n))))

(defn bit-flip [x n]
  (bit-xor x (bit-shift-left 1 n)))

(defn bit-test [x n]
  (php/!= 0 (bit-and x (bit-shift-left 1 n))))

# --------------
# Math operation
# --------------

(def NAN
  "Constant for Not a Number (NAN) values."
  php/NAN)

(defn +
  "Returns the sum of all elements in `xs`. All elements is `xs` must be numbers.
  If `xs` is empty, return 0."
  [& xs]
  (if (empty? xs)
    0
    (apply php/+ xs)))

(defn -
  "Returns the difference of all elements in `xs`. If `xs` is empty, return 0. If `xs`
  has one element, return the negative value of that element."
  [& xs]
  (case (count xs)
    0 0
    1 (php/* -1 (first xs))
    2 (php/- (first xs) (second xs))
      (reduce2 |(php/- $1 $2) xs)))

(defn *
  "Returns the product of all elements in `xs`. All elements in `xs` must be
numbers. If `xs` is empty, return 1."
  [& xs]
  (case (count xs)
    0 1
    1 (first xs)
    2 (php/* (first xs) (second xs))
      (reduce2 |(php/* $1 $2) xs)))

(defn /
  "Returns the nominator divided by all of the denominators. If `xs` is empty,
returns 1. If `xs` has one value, returns the reciprocal of x."
  [& xs]
  (case (count xs)
    0 1
    1 (php// 1 (first xs))
    2 (php// (first xs) (second xs))
      (reduce2 |(php// $1 $2) xs)))

(defn %
  "Return the remainder of `dividend` / `divisor`."
  [dividend divisor]
  (php/% dividend divisor))

(defn **
  "Return `a` to the power of `x`."
  [a x]
  (php/** a x))

(defn inc
  "Increments `x` by one."
  [x]
  (+ x 1))

(defn dec
  "Decrements `x` by one."
  [x]
  (- x 1))

(defn even?
  "Checks if `x` is even."
  [x]
  (= 0 (% x 2)))

(defn odd?
  "Checks if `x` is odd."
  [x]
  (= 1 (% x 2)))

(defn zero?
  "Checks if `x` is zero."
  [x]
  (= x 0))

(defn one?
  "Checks if `x` is one."
  [x]
  (= x 1))

(defn pos?
  "Checks if `x` is greater than zero."
  [x]
  (> x 0))

(defn neg?
  "Checks if `x` is smaller than zero."
  [x]
  (< x 0))

(defn nan?
  "Checks if `x` is not a number"
  [x]
  (php/is_nan x))

(defn rand
  "Returns a random number between 0 and 1."
  []
  (/ (php/random_int 0 php/PHP_INT_MAX) php/PHP_INT_MAX))

(defn rand-int
  "Returns a random number between 0 and `n`"
  [n]
  (php/random_int 0 n))

(defn extreme
  "Returns the most extreme value in `args` based on the binary `order` function."
  [order args]
  (reduce2 |(if (order $1 $2) $1 $2) args))

(defn min
  "Returns the numeric minimum of all numbers."
  [& numbers]
  (extreme < numbers))

(defn max
  "Returns the numeric maximum of all numbers."
  [& numbers]
  (extreme > numbers))

(defn sum
  "Returns the sum of all elements is `xs`."
  [xs]
  (apply + xs))

(defn mean
  "Returns the mean of `xs`."
  [xs]
  (/ (sum xs) (count xs)))

# ----------------
# Print operations
# ----------------

(defmacro with-output-buffer [& body]
  (let [res (gensym)]
    `(do
      (php/ob_start)
      ,@body
      (let [,res (php/ob_get_contents)]
        (php/ob_end_clean)
        ,res))))

(defn print-str [& xs]
  (let [len (count xs)
        printer (php/new Printer)
        pp |(php/-> printer (print $ false))]
    (cond
      (= len 0) ""
      (= len 1) (php/-> printer (print (first xs) false))
                (loop [res (php/-> printer (print (first xs) false))
                       seq (next xs)]
                  (if seq
                    (recur
                      (str res " " (php/-> printer (print (first seq) false)))
                      (next seq))
                    res)))))

(defn print [& xs]
  (php/print (apply print-str xs)))

(defn println [& xs]
  (do
    (apply print xs)
    (php/print "\n")))