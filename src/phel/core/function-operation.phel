(ns phel\core)

(defn identity
  "Returns its argument"
  [x]
  x)

(defn comp
  "Takes a list of functions and returns a function that is the composition
  of those functions."
  [& fs]
  (case (count fs)
    0 identity
    1 (first fs)
    2 |((first fs) (apply (second fs) $&))
    (reduce2 comp fs)))

(defn complement
  "Returns a function that takes the same arguments as `f` and returns the opposite truth value."
  [f]
  |(not (apply f $&)))

(defn juxt
  "Takes a list of functions and returns a new function that is the juxtaposition of those functions.
  `((juxt a b c) x) => [(a x) (b x) (c x)]`"
  [& fs]
  (fn [& args]
    (reduce
     |(push $1 (apply $2 args))
     @[]
     fs)))

(defn partial
  "Takes a function `f` and fewer than normal arguments of `f` and returns a function
  that a variable number of additional arguments. When call `f` will be called
  with `args` and the additional arguments"
  [f & args]
  |(apply f (concat @[] args $&)))
