(ns phel\core)

(defn bit-and [x y & args]
  (let [all (concat [x y] args)]
    (reduce2 |(php/& $1 $2) all)))

(defn bit-or [x y & args]
  (let [all (concat [x y] args)]
    (reduce2 |(php/| $1 $2) all)))

(defn bit-xor [x y & args]
  (let [all (concat [x y] args)]
    (reduce2 |(php/^ $1 $2) all)))

(defn bit-not [x]
  (php/~ x))

(defn bit-shift-left [x n]
  (php/<< x n))

(defn bit-shift-right [x n]
  (php/>> x n))

(defn bit-set [x n]
  (bit-or x (bit-shift-left 1 n)))

(defn bit-clear [x n]
  (bit-and x (bit-not (bit-shift-left 1 n))))

(defn bit-flip [x n]
  (bit-xor x (bit-shift-left 1 n)))

(defn bit-test [x n]
  (php/!= 0 (bit-and x (bit-shift-left 1 n))))
