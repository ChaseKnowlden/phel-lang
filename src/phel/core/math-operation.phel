(ns phel\core)

(def NAN
  "Constant for Not a Number (NAN) values."
  php/NAN)

(defn +
  "Returns the sum of all elements in `xs`. All elements `xs` must be numbers.
  If `xs` is empty, return 0."
  [& xs]
  (if (empty? xs)
    0
    (apply php/+ xs)))

(defn -
  "Returns the difference of all elements in `xs`. If `xs` is empty, return 0. If `xs`
  has one element, return the negative value of that element."
  [& xs]
  (case (count xs)
    0 0
    1 (php/* -1 (first xs))
    2 (php/- (first xs) (second xs))
    (reduce2 |(php/- $1 $2) xs)))

(defn *
  "Returns the product of all elements in `xs`. All elements in `xs` must be
numbers. If `xs` is empty, return 1."
  [& xs]
  (case (count xs)
    0 1
    1 (first xs)
    2 (php/* (first xs) (second xs))
    (reduce2 |(php/* $1 $2) xs)))

(defn /
  "Returns the nominator divided by all the denominators. If `xs` is empty,
returns 1. If `xs` has one value, returns the reciprocal of x."
  [& xs]
  (case (count xs)
    0 1
    1 (php// 1 (first xs))
    2 (php// (first xs) (second xs))
    (reduce2 |(php// $1 $2) xs)))

(defn %
  "Return the remainder of `dividend` / `divisor`."
  [dividend divisor]
  (php/% dividend divisor))

(defn **
  "Return `a` to the power of `x`."
  [a x]
  (php/** a x))

(defn inc
  "Increments `x` by one."
  [x]
  (+ x 1))

(defn dec
  "Decrements `x` by one."
  [x]
  (- x 1))

(defn even?
  "Checks if `x` is even."
  [x]
  (= 0 (% x 2)))

(defn odd?
  "Checks if `x` is odd."
  [x]
  (= 1 (% x 2)))

(defn zero?
  "Checks if `x` is zero."
  [x]
  (or (= x 0) (= x 0.0)))

(defn one?
  "Checks if `x` is one."
  [x]
  (or (= x 1) (= x 1.0)))

(defn pos?
  "Checks if `x` is greater than zero."
  [x]
  (> x 0))

(defn neg?
  "Checks if `x` is smaller than zero."
  [x]
  (< x 0))

(defn nan?
  "Checks if `x` is not a number."
  [x]
  (php/is_nan x))

(defn rand
  "Returns a random number between 0 and 1."
  []
  (/ (php/random_int 0 php/PHP_INT_MAX) php/PHP_INT_MAX))

(defn rand-int
  "Returns a random number between 0 and `n`."
  [n]
  (php/random_int 0 n))

(defn rand-nth
  "Returns a random item from xs."
  [xs]
  (get xs (rand-int (dec (count xs)))))

(defn extreme
  "Returns the most extreme value in `args` based on the binary `order` function."
  [order args]
  (reduce2 |(if (order $1 $2) $1 $2) args))

(defn min
  "Returns the numeric minimum of all numbers."
  [& numbers]
  (extreme < numbers))

(defn max
  "Returns the numeric maximum of all numbers."
  [& numbers]
  (extreme > numbers))

(defn sum
  "Returns the sum of all elements is `xs`."
  [xs]
  (apply + xs))

(defn mean
  "Returns the mean of `xs`."
  [xs]
  (/ (sum xs) (count xs)))
