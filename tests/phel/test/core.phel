(ns phel\test\core
  (:use DateTime))

(defn assert [test err]
  (do
    (if test
      (print ".")
      (do
        (php/print "\n")
        (php/print "e ")
        (php/print err)
        (php/print "\n")))))

# ------------------
# Basic constructors
# ------------------

(assert (= '(1 2 3) (tuple '1 '2 '3)) "construct tuple")
(assert (= '[1 2 3] (tuple-brackets '1 '2 '3)) "construct bracket tuple")
(assert (= @[1 2 3] (array 1 2 3)) "construct array")
(assert (= :a (keyword "a")) "construct keyword")
(assert (= @{:a 1 :b 2} (table :a 1 :b 2)) "construct table")

# ----------------------------
# Basic methods for quasiquote
# ----------------------------

(assert (= nil (next [])) "next of empty tuple")
(assert (= nil (next [1])) "next of one element tuple")
(assert (= [2] (next [1 2])) "next of two element tuple")

(assert (= @[1 2] (concat @[1 2])) "concat one argument")
(assert (= @[1 2 3 4] (concat @[1] @[2 3] @[4])) "concat three arguments")

# -------------------------
# Basic sequence operations
# -------------------------

(assert (= (php/array 1 2) (cons 1 (php/array 2))) "cons php array")
(assert (= [1 2] (cons 1 [2])) "cons tuple")
(assert (= @[1 2] (cons 1 @[2])) "cons array")
(assert (= @[1] (cons 1 nil)) "cons nil")
 
(assert (= 1 (first [1])) "first of tuple")
(assert (= nil (first [])) "frist of empty tuple")
(assert (= 1 (first @[1])) "first of array")
(assert (= nil (first @[])) "frist of empty array")
(assert (= 1 (first (php/array 1))) "first of php array")
(assert (= nil (first (php/array))) "frist of empty php array")
(assert (= nil (first nil)) "frist of nil")
 
(assert (= 2 (second [1 2])) "second of tuple")
(assert (= nil (second [])) "second of empty tuple")
(assert (= 2 (second @[1 2])) "second of array")
(assert (= nil (second @[])) "second of empty array")
(assert (= 2 (second (php/array 1 2))) "second of pgp array")
(assert (= nil (second (php/array))) "second of empty php array")
(assert (= nil (second nil)) "second of nil")

(assert (= [2] (rest [1 2])) "rest of two element tuple")
(assert (= [] (rest [1])) "rest of one element tuple")
(assert (= [] (rest [])) "rest of empty tuple")

(assert (= 0 (count [])) "count of empty tuple")
(assert (= 0 (count nil)) "count of nil")
(assert (= 0 (count @[])) "count of empty array")
(assert (= 0 (count (php/array))) "count of empty php array")
(assert (= 0 (count @{})) "count of empty table")
(assert (= 1 (count ["a"])) "count of one element tuple")
(assert (= 1 (count @["a"])) "count of one element array")
(assert (= 1 (count (php/array "a"))) "count of one element php array")
(assert (= 1 (count @{:a 1})) "count of one element table")

# ------------------------
# Control structure macros
# ------------------------

(assert (= 2 (if-not true 1 2)) "if-not true")
(assert (= 1 (if-not false 1 2)) "if-not false")

(assert (= 1 (when true 1)) "when true")
(assert (= nil (when false 1)) "when false")

(assert (= nil (when-not true 1)) "when-not true")
(assert (= 1 (when-not false 1)) "when-not false")

(assert (= nil (cond)) "cond zero args")
(assert (= 1 (cond 1)) "cond one arg")
(assert (= 1 (cond true 1 2)) "cond true")
(assert (= 2 (cond false 1 2)) "cond false")

(assert (= nil (case true)) "case zero args")
(assert (= 1 (case true 1)) "case one arg")
# (assert (= nil (case true false 2)) "case one test without default")
(assert (= 1 (case true false 2 1)) "case one failed test with default")
# (assert (= 2 (case true true 2)) "case one successful test without default")
(assert (= 2 (case true true 2 1)) "case one successful test with default")

# ----------------
# Boolen operation
# ----------------

(assert (= nil (or)) "or zero args")
(assert (= true (or true)) "(or true)")
(assert (= false (or false)) "(or false")
(assert (= true (or true false)) "(or true false)")
(assert (= true (or false true)) "(or false true)")
(assert (= false (or false false)) "(or false false)")
(assert (= 10 (or false 10)) "(or false 10)")
(assert (= 10 (or 10)) "(or 10)")

(assert (= true (and)) "(and)")
(assert (= true (and true)) "(and true)")
(assert (= true (and true true)) "(and true true)")
(assert (= false (and false)) "(and false)")
(assert (= false (and true false)) "(and true false)")
(assert (= false (and true false true)) "(and true false true)")
(assert (= 10 (and true 10)) "(and true 10)")
(assert (= false (and false 10)) "(and false 10)")
(assert (= 10 (and 10)) "(and 10)")

(assert (= true (id false)) "(id false)")
(assert (= true (id false false)) "(id false false)")
(assert (= true (id false false false)) "(id false false false)")
(assert (= false (id false true false)) "(id false true false)")
(assert (= true (id 10 10)) "(id 10 10)")
(assert (= false (id 10 10.0)) "(id 10 10.0)")

(assert (= true (= false)) "(= false)")
(assert (= true (= false false)) "(= false false)")
(assert (= true (= false false false)) "(= false false false)")
(assert (= false (= false true false)) "(= false true false)")
(assert (= true (= 10 10)) "(= 10 10)")
(assert (= true (= 10 10.0)) "(= 10 10.0)")

(assert (= false (not true)) "(not true)")
(assert (= true (not false)) "(not false)")
(assert (= false (not 10)) "(not 10)")
(assert (= false (not [])) "(not [])")

(assert (= false (not= false)) "(not= false)")
(assert (= false (not= false false)) "(not= false false)")
(assert (= false (not= false false false)) "(not= false false false)")
(assert (= true (not= false true false)) "(not= false true false)")
(assert (= false (not= 10 10)) "(not= 10 10)")
(assert (= false (not= 10 10.0)) "(not= 10 10.0)")

(assert (= true (< 10)) "(< 10)")
(assert (= true (< 10 20)) "(< 10 20)")
(assert (= true (< 10 20 30)) "(< 10 20 30)")
(assert (= false (< 10 10)) "(< 10 10)")
(assert (= false (< 10 9)) "(< 10 9)")
(assert (= false (< 10 20 15)) "(< 10 20 15)")
(assert (= false (< 10 20 20)) "(< 10 20 20)")

(assert (= true (<= 10)) "(<= 10)")
(assert (= true (<= 10 20)) "(<= 10 20)")
(assert (= true (<= 10 20 30)) "(<= 10 20 30)")
(assert (= true (<= 10 10)) "(<= 10 10)")
(assert (= false (<= 10 9)) "(<= 10 9)")
(assert (= false (<= 10 20 15)) "(<= 10 20 15)")
(assert (= true (<= 10 20 20)) "(<= 10 20 20)")

(assert (= true (> 10)) "(> 10)")
(assert (= true (> 20 10)) "(> 20 10)")
(assert (= true (> 30 20 10)) "(> 30 20 10)")
(assert (= false (> 10 10)) "(> 10 10)")
(assert (= false (> 9 10)) "(> 9 10)")
(assert (= false (> 20 10 15)) "(> 20 20 15)")
(assert (= false (> 20 20 10)) "(> 20 20 10)")

(assert (= true (>= 10)) "(>= 10)")
(assert (= true (>= 20 10)) "(>= 20 10)")
(assert (= true (>= 30 20 10)) "(>= 30 20 10)")
(assert (= true (>= 10 10)) "(>= 10 10)")
(assert (= false (>= 9 10)) "(>= 9 10)")
(assert (= false (>= 20 10 15)) "(>= 20 20 15)")
(assert (= true (>= 20 20 10)) "(>= 20 20 10)")

(assert (= true (all pos? @[1 2 3])) "all pos? in list")
(assert (= true (all pos? @[])) "all pos? in empty list")
(assert (= false (all pos? @[1 -1 3])) "all pos? in list")

(assert (= true (some pos? @[1 2 3])) "some pos? in list")
(assert (= false (some pos? @[])) "some pos? in empty list")
(assert (= true (some pos? @[1 -1 3])) "some pos? in list")
(assert (= false (some pos? @[-1 -1 -3])) "some pos? in list")

(assert (= true (true? true)) "(true? true)")
(assert (= false (true? [])) "(true? [])")
(assert (= false (true? 10)) "(true? 10)")
(assert (= false (true? nil)) "(true? nil)")
(assert (= false (true? false)) "(true? false)")

(assert (= true (truthy? true)) "(truthy? true)")
(assert (= true (truthy? [])) "(truthy? [])")
(assert (= true (truthy? 10)) "(truthy? 10)")
(assert (= false (truthy? nil)) "(truthy? nil)")
(assert (= false (truthy? false)) "(truthy? false)")

(assert (= true (false? false)) "(false? false)")
(assert (= false (false? nil)) "(false? nil)")
(assert (= false (false? true)) "(false? true)")

# --------------
# Type operation
# --------------

(assert (= :tuple (type [])) "type of bracket tuple")
(assert (= :tuple (type '())) "type of tuple")
(assert (= :table (type @{})) "type of table")
(assert (= :keyword (type :test)) "type of keyword")
(assert (= :symbol (type 'x)) "type of symbol")
(assert (= :int (type 10)) "type of int")
(assert (= :float (type 10.0)) "type of float")
(assert (= :string (type "test")) "type of string")
(assert (= :nil (type nil)) "type of nil")
(assert (= :boolean (type true)) "type of boolean")
(assert (= :boolean (type false)) "type of boolean")
(assert (= :function (type concat)) "type of function")
(assert (= :php/array (type (php/array))) "type of php array")
(assert (= :php/resource (type (php/tmpfile))) "type of php resource")
(assert (= :php/object (type (php/new DateTime))) "type of php object")

(assert (= true (nil? nil)) "nil? on nil")
(assert (= false (nil? false)) "nil? on false")
(assert (= false (nil? true)) "nil? on true")

(assert (= true (float? 10.0)) "float? on 10.0")
(assert (= true (float? 0.0)) "float? on 0.0")
(assert (= false (float? 10)) "float? on 10")
(assert (= false (float? 0)) "float? on 10")

(assert (= false (int? 10.0)) "int? on 10.0")
(assert (= false (int? 0.0)) "int? on 0.0")
(assert (= true (int? 10)) "int? on 10")
(assert (= true (int? 0)) "int? on 10")

(assert (= true (number? 10.0)) "number? on 10.0")
(assert (= true (number? 0.0)) "number? on 0.0")
(assert (= true (number? 10)) "number? on 10")
(assert (= true (number? 0)) "number? on 10")
(assert (= false (number? "10")) "number? on '10'")
(assert (= false (number? "0")) "number? on '0'")

(assert (= true (string? "test")) "string? on 'test'")
(assert (= true (string? "")) "string? on empty string")
(assert (= true (string? ":test")) "string? on ':test'")

(assert (= true (keyword? :test)) "keyword? on :test")
(assert (= false (keyword? ":test")) "keyword? on string")

(assert (= true (symbol? 'x)) "symbol? on 'x")

(assert (= true (function? concat)) "function? on concat")

(assert (= true (table? @{})) "table?")

(assert (= true (array? @[])) "array? on phel array")
(assert (= false (array? (php/array))) "array? on php array")

(assert (= true (tuple? [])) "tuple?")

(assert (= true (boolean? true)) "boolean? on true")
(assert (= true (boolean? false)) "boolean? on false")
(assert (= false (boolean? nil)) "boolean? on nil")

(assert (= true (php-array? (php/array))) "php-array? on php array")
(assert (= false (php-array? @[])) "php-array? on phel array")

(assert (= true (php-resource? (php/tmpfile))) "php-resource?")

(assert (= true (php-object? (php/new DateTime))) "php-object?")

(assert (= true (empty? @[])) "empty? on empty phel array")
(assert (= true (empty? [])) "empty? on empty phel tuple")
(assert (= true (empty? (php/array))) "empty? on empty php array")
(assert (= true (empty? @{})) "empty? on empty table")
(assert (= false (empty? @[1])) "empty? on one element array")
(assert (= false (empty? [1])) "empty? on one element tuple")
(assert (= false (empty? (php/array 1))) "empty? on one element php array")
(assert (= false (empty? @{:a 1})) "empty? on one element table")

(assert (= true (dict? @{})) "dict? on table")
(assert (= false (dict? @[])) "dict? on array")
(assert (= false (dict? [])) "dict? on tuple")
(assert (= false (dict? (php/array))) "dict? on php array")

(assert (= false (indexed? @{})) "indexed? on table")
(assert (= true (indexed? @[])) "indexed? on array")
(assert (= true (indexed? [])) "indexed? on tuple")
(assert (= true (indexed? (php/array))) "indexed? on php array")

# ------------------
# Sequence operation
# ------------------

(assert (= @["1" "2"] (map str [1 2])) "map1")
(assert (= @["13" "24"] (map str [1 2] [3 4])) "map2")
(assert (= @["13" "24"] (map str [1 2 10] [3 4])) "map2 unequal size")

(assert (= "abc" (reduce str "" ["a" "b" "c"])) "reduce three elements tuple")
(assert (= "x" (reduce str "x" [])) "reduce empty tuple")

(assert (= "abc" (reduce2 str ["a" "b" "c"])) "reduce2 three elements tuple")
(assert (= "a" (reduce2 str ["a"])) "reduce2 one element tuple")
(assert (= "" (reduce2 str [])) "reduce2 empty tuple")

(assert (= 3 (peek [1 2 3])) "peek on tuple")
(assert (= nil (peek [])) "peek on empty tuple")
(assert (= 3 (peek @[1 2 3])) "peek on array")
(assert (= nil (peek @[])) "peek on empty array")
(assert (= 3 (peek (php/array 1 2 3))) "peek on php array")
(assert (= nil (peek (php/array))) "peek on empty php array")

(let [x @[]]
  (push x 1)
  (assert (= @[1] x) "push on array"))

(let [x @[1 2]
      y (pop x)]
  (assert (= @[1] x) "pop: last element is removed")
  (assert (= 2 y) "pop: last element is returned"))

(let [xs @[1 2 3 4]
     removed (remove xs 2)]
  (assert (= @[1 2 4] xs) "remove: elements are removed")
  (assert (= @[3] removed) "remove: correct value is returned"))

(let [xs @[1 2 3 4]
     removed (remove xs 2 2)]
  (assert (= @[1 2] xs) "remove with length: elements are removed")
  (assert (= @[3 4] removed) "remove with length: correct value is returned"))

(assert (= @[3 4] (slice @[1 2 3 4] 2)) "slice on array")
(assert (= @[3] (slice @[1 2 3 4] 2 1)) "slice with length on array")
(assert (= [3 4] (slice [1 2 3 4] 2)) "slice on tuple")
(assert (= [3] (slice [1 2 3 4] 2 1)) "slice with length on tuple")

(assert (= "b" (get (php/array "a" "b" "c") 1)) "get on php array")
(assert (= "b" (get @["a" "b" "c"] 1)) "get on array")
(assert (= "b" (get ["a" "b" "c"] 1)) "get on tuple")
(assert (= "a" (get @{:a "a" :b "b"} :a)) "get on table")
(assert (= nil (get nil 1)) "get on nil")
(assert (= nil (get @["a" "b" "c"] 10)) "get on undefined index")
(assert (= nil (get @{:a "a" :b "b"} :c)) "get on undefined key")
(assert (= "x" (get nil 1 "x")) "get on nil with optional value")
(assert (= "x" (get @["a" "b" "c"] 10 "x")) "get on undefined index with optional value")
(assert (= "x" (get @{:a "a" :b "b"} :c "x")) "get on undefined key with optional value")

(assert (= "a" (get-in @["a"] [0])) "get-in level 1")
(assert (= "a" (get-in @{:a @["a"]} [:a 0])) "get-in level 2")
(assert (= "a" (get-in @{:a @[["b" "a"]]} [:a 0 1])) "get-in level 3")
(assert (= "x" (get-in @{:a @[["b" "a"]]} [:b 0 1] "x")) "get-in level 3 with default")

(assert (= @["a"] (put @["a" "b"] 1 nil)) "put: remove entry from array")
(assert (= @["a" "c"] (put @["a" "b"] 1 "c")) "put: replace entry on array")
(assert (= @["a" "b" "c"] (put @["a" "b"] 2 "c")) "put: append entry on array")
(assert (= @{:b 2} (put @{:a 1 :b 2} :a nil)) "put: remove entry from table")
(assert (= @{:a 3 :b 2} (put @{:a 1 :b 2} :a 3)) "put: replace entry on table")
(assert (= @{:a 1 :b 2 :c 3} (put @{:a 1 :b 2} :c 3)) "put: append entry on table")

(assert (= @{:a @{:b @{:c 1}}} (put-in @{:a @{}} @[:a :b :c] 1)) "put-in: autocreate tables")

# --------------
# Math operation
# --------------

(assert (= 0 (+)) "+ zero arguments")
(assert (= 1 (+ 1)) "+ one arguments")
(assert (= 3 (+ 1 2)) "+ two arguments")

(assert (= 0 (-)) "- zero arguments")
(assert (= -1 (- 1)) "- one arguments")
(assert (= 1 (- 2 1)) "- two arguments")

(assert (= 1 (*)) "* zero arguments")
(assert (= 2 (* 2)) "* one arguments")
(assert (= 6 (* 2 3)) "* two arguments")
(assert (= 24 (* 2 3 4)) "* three arguments")

(assert (= 1 (/)) "/ zero arguments")
(assert (= 0.5 (/ 2)) "/ one arguments")
(assert (= 2 (/ 4 2)) "/ two arguments")
(assert (= 2 (/ 16 4 2)) "/ three arguments")

(assert (= 0 (% 10 2)) "10 % 2")
(assert (= 1 (% 11 2)) "11 % 2")

(assert (= 8 (** 2 3)) "2 ** 3")

(assert (= 1 (inc 0)) "(inc 0)")
(assert (= 0 (inc -1)) "(inc -1)")
(assert (= 2 (inc 1)) "(inc 1)")

(assert (= -1 (dec 0)) "(inc 0)")
(assert (= -2 (dec -1)) "(inc -1)")
(assert (= 0 (dec 1)) "(inc 1)")

(assert (= true (even? 0)) "(even? 0)")
(assert (= false (even? 1)) "(even? 1)")
(assert (= true (even? 2)) "(even? 2)")

(assert (= false (odd? 0)) "(odd? 0)")
(assert (= true (odd? 1)) "(odd? 1)")
(assert (= false (odd? 2)) "(odd? 2)")

(assert (= true (zero? 0)) "(zero? 0)")
(assert (= true (zero? 0.0)) "(zero? 0.0)")
(assert (= false (zero? 0.1)) "(zero? 0.1)")
(assert (= false (zero? -0.1)) "(zero? -0.1)")

(assert (= true (one? 1)) "(one? 1)")
(assert (= true (one? 1.0)) "(one? 1.1)")
(assert (= false (one? 0)) "(one? 0)")

(assert (= false (pos? 0)) "(pos? 1)")
(assert (= true (pos? 1)) "(pos? 1)")
(assert (= true (pos? 0.1)) "(pos? 0.1)")
(assert (= false (pos? -0.1)) "(pos? -0.1)")
(assert (= false (pos? -1)) "(pos? -1)")

(assert (= false (neg? 0)) "(neg? 1)")
(assert (= false (neg? 1)) "(neg? 1)")
(assert (= false (neg? 0.1)) "(neg? 0.1)")
(assert (= true (neg? -0.1)) "(neg? -0.1)")
(assert (= true (neg? -1)) "(neg? -1)")

# ----------------
# Print operations
# ----------------

(assert (= "" (str)) "str with no arg")
(assert (= "hello\nworld" (str "hello\nworld")) "str with one arg")
(assert (= "ab" (str "a" "b")) "str with two args")
(assert (= "abc" (str "a" "b" "c")) "str with three args")
(assert (= "[\"a\" \"b\"]" (str ["a" "b"])) "str with tuple of strings")
(assert (= "@[\"a\" \"b\"]" (str @["a" "b"])) "str with array of strings")
(assert (= "@{\"a\" \"b\"}" (str @{"a" "b"})) "str on table")
(assert (= "x" (str 'x)) "str on symbol")
(assert (= ":test" (str :test)) "str on keyword")
(assert (= "1" (str 1)) "str on number")
(assert (= "1" (str true)) "str on true")
(assert (= "" (str false)) "str on false")
(assert (= "" (str nil nil)) "str on nil")

(assert (= "" (print-str)) "print-str with no arg")
(assert (= "hello\nworld" (print-str "hello\nworld")) "print-str with one arg")
(assert (= "a b" (print-str "a" "b")) "print-str with two args")
(assert (= "a b c" (print-str "a" "b" "c")) "print-str with three args")
(assert (= "[a b]" (print-str ["a" "b"])) "print-str with tuple of strings")
(assert (= "@[a b]" (print-str @["a" "b"])) "print-str with array of strings")
(assert (= "@{a b}" (print-str @{"a" "b"})) "print-str on table")
(assert (= "x" (print-str 'x)) "print-str on symbol")
(assert (= ":test" (print-str :test)) "print-str on keyword")
(assert (= "1" (print-str 1)) "print-str on number")
(assert (= "true" (print-str true)) "print-str on true")
(assert (= "false" (print-str false)) "print-str on false")
(assert (= "nil" (print-str nil)) "print-str on nil")

(assert (= "hello\nworld" (with-output-buffer (print "hello\nworld"))) "print hello\\nworld")

(assert (= "hello\nworld\n" (with-output-buffer (println "hello\nworld"))) "println hello\\nworld")

(println)